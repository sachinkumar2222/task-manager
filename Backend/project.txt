ğŸ“‚ tasksphere/
â”œâ”€â”€ ğŸ“‚ api-gateway/              # (Port 4000) The single entry point for the frontend.
â”‚   â”œâ”€â”€ ğŸ“œ server.js
â”‚   â”œâ”€â”€ ğŸ“œ package.json
â”‚   â””â”€â”€ ğŸ“œ .env
â”‚
â”œâ”€â”€ ğŸ“‚ auth-service/              # (Port 4001) Manages users, roles, and JWTs.
â”‚   â”œâ”€â”€ ğŸ“‚ controllers/
â”‚   â”‚   â””â”€â”€ ğŸ“œ authController.js
â”‚   â”œâ”€â”€ ğŸ“‚ models/
â”‚   â”‚   â””â”€â”€ ğŸ“œ userModel.js
â”‚   â”œâ”€â”€ ğŸ“‚ routes/
â”‚   â”‚   â””â”€â”€ ğŸ“œ authRoutes.jsx
â”‚   â”œâ”€â”€ ğŸ“œ server.js
â”‚   â”œâ”€â”€ ğŸ“œ package.json
â”‚   â””â”€â”€ ğŸ“œ .env
â”‚
â”œâ”€â”€ ğŸ“‚ task-service/              # (Port 4002) Core logic for projects, tasks, and comments.
â”‚   â”œâ”€â”€ ğŸ“‚ controllers/
â”‚   â”‚   â”œâ”€â”€ ğŸ“œ projectController.js
â”‚   â”‚   â”œâ”€â”€ ğŸ“œ taskController.js
â”‚   â”‚   â””â”€â”€ ğŸ“œ commentController.js
â”‚   â”œâ”€â”€ ğŸ“‚ db/
â”‚   â”‚   â””â”€â”€ ğŸ“œ db.js               # Manages the PostgreSQL connection pool.
â”‚   â”œâ”€â”€ ğŸ“‚ middleware/
â”‚   â”‚   â””â”€â”€ ğŸ“œ checkAuth.js         # Verifies the JWT from the Auth Service.
â”‚   â”œâ”€â”€ ğŸ“‚ models/
â”‚   â”‚   â”œâ”€â”€ ğŸ“œ projectModel.js
â”‚   â”‚   â”œâ”€â”€ ğŸ“œ taskModel.js
â”‚   â”‚   â””â”€â”€ ğŸ“œ commentModel.js
â”‚   â”œâ”€â”€ ğŸ“‚ routes/
â”‚   â”‚   â””â”€â”€ ğŸ“œ apiRoutes.js        # Defines all routes for projects, tasks, etc.
â”‚   â”œâ”€â”€ ğŸ“œ server.js
â”‚   â”œâ”€â”€ ğŸ“œ package.json
â”‚   â””â”€â”€ ğŸ“œ .env
â”‚
â”œâ”€â”€ ğŸ“‚ notification-service/      # (Port 4003) Handles real-time notifications via WebSockets.
â”‚   â”œâ”€â”€ ğŸ“‚ listeners/
â”‚   â”‚   â””â”€â”€ ğŸ“œ eventListener.js     # Listens for events from other services (e.g., RabbitMQ).
â”‚   â”œâ”€â”€ ğŸ“‚ websocket/
â”‚   â”‚   â””â”€â”€ ğŸ“œ socketHandler.js    # Manages client WebSocket connections.
â”‚   â”œâ”€â”€ ğŸ“œ server.js
â”‚   â”œâ”€â”€ ğŸ“œ package.json
â”‚   â””â”€â”€ ğŸ“œ .env
â”‚
â”œâ”€â”€ ğŸ“‚ file-service/              # (Port 4004) Manages file uploads to cloud storage.
â”‚   â”œâ”€â”€ ğŸ“‚ controllers/
â”‚   â”‚   â””â”€â”€ ğŸ“œ fileController.js
â”‚   â”œâ”€â”€ ğŸ“‚ middleware/
â”‚   â”‚   â””â”€â”€ ğŸ“œ checkAuth.js
â”‚   â”œâ”€â”€ ğŸ“‚ routes/
â”‚   â”‚   â””â”€â”€ ğŸ“œ fileRoutes.js
â”‚   â”œâ”€â”€ ğŸ“‚ services/
â”‚   â”‚   â””â”€â”€ ğŸ“œ s3Service.js        # Contains all logic for interacting with AWS S3.
â”‚   â”œâ”€â”€ ğŸ“œ server.js
â”‚   â”œâ”€â”€ ğŸ“œ package.json
â”‚   â””â”€â”€ ğŸ“œ .env
â”‚
â”œâ”€â”€ ğŸ“‚ analytics-service/         # (Port 4005) Processes events and serves analytics data.
â”‚   â”œâ”€â”€ ğŸ“‚ controllers/
â”‚   â”‚   â””â”€â”€ ğŸ“œ analyticsController.js
â”‚   â”œâ”€â”€ ğŸ“‚ listeners/
â”‚   â”‚   â””â”€â”€ ğŸ“œ eventProcessor.js   # Consumes and processes events.
â”‚   â”œâ”€â”€ ğŸ“‚ models/
â”‚   â”‚   â””â”€â”€ ğŸ“œ analyticsModel.js
â”‚   â”œâ”€â”€ ğŸ“‚ routes/
â”‚   â”‚   â””â”€â”€ ğŸ“œ analyticsRoutes.js
â”‚   â”œâ”€â”€ ğŸ“œ server.js
â”‚   â”œâ”€â”€ ğŸ“œ package.json
â”‚   â””â”€â”€ ğŸ“œ .env
â”‚
â””â”€â”€ ğŸ“œ .gitignore                # To ignore node_modules, .env files, etc.